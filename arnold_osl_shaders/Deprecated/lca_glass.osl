shader lca_glass(
    float Ks = 1,
    color Cs = 1,
    float eta = 1.5,
    int caustics = 0,
    int TIR = 0,
    color opacity = 1,
    output closure color result = 0)
{
    result = Cs*diffuse(N);
}
/*
{
    if (caustics || (!raytype("glossy") && !raytype("diffuse"))) 
    {
        // Take into account backfacing to invert eta accordingly
        if (backfacing()) 
        {
            result = Cs * refraction(N, 1.0 / eta);
            // If Total Internal Reflection is enabled, we also return a
            // reflection closure, which might make rays bounce too much
            // inside an object. That's why we make it optional.
            if (TIR)
               result += Ks * reflection(N, 1.0 / eta);
        } 
        else 
        {
            result = Ks * reflection(N, eta) + Cs * refraction(N, eta);
        }
    }
    else
    {
        result = background();
    }
}
*/